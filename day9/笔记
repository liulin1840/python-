志不坚者智不达

ssh 密钥

RSA -非对称密钥验证

公钥  public  key id_rsa.pub    是给别人的

私钥  private key /root/id_rsa

10.0.0.31    -----> 10.0.0.41
私钥                    公钥

ssh -keygen 生成秘钥
ssh-copy-id "root@10.10.0.31 -p52113"

dd:删除一行,上下滑动就是一行 more /root/.ssh/id_rsa.pub

把公钥传递给授权文件,想登谁就把公钥给他

sz ~/.ssh/id_rsa
421 = 7
rwx     rwx     rwx
属主     属组   others


ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAvNhNa1INz7Dqhq5BOu8yqvvjVCguO4iM1bH6SZHFu418pKMJwb4AU2qeuDI3lkZjPOmjQ7dap3m9f8W/jCb4tU4rfTj39m98BJMgTotHMHhENqh7+nPa30cDuLDXM84XylnF3u1/ZW7NdupCzbG4Y1Tsof6QuNYd2fn07+ZpOBMUJIssJHXb1HCPTzp5eA8j9wKPIPHk/ASjjUJk5TIc6r9SJmgNQN1J3xRB7IWKoesYiEJk6K/VoDHDY355ozsNKm0QTYT39q4KUmIc8c8g5Dl51u05jYZqlUYN1+1pqdzl81xhaqj+3aRRZNn36RvCG9NfwH1yWwzHSsqcY37Mrw== root@nfs01

cpu : 2.7Ghz
内存: 1s 12G RAM
硬盘: 1s 20M disk

分析:画图软件给qq发消息,可以吗?两个内存是独立的,如果可以那就不安全了
     每个程序的内存是独立的,

进程: qq 要以一个整体的形式暴露给操作系统管理，里面包含对各种资源的调用，
内存的管理，网络接口的调用等。。。
对各种资源管理的集合 就可以成为  进程

线程: 是操作系统最小的调度单位， 是一串指令的集合


进程 要操作cpu , 必须要先创建一个线程，
all the threads in a process have the same view of the memory
所有在同一个进程里的线程是共享同一块内存空间的,房间里的人共享这个空间

进程就是这个屋子,我们就是里面的线程

A thread线程 is an execution执行 context上下文, which is all the information a
CPU needs to execute a stream of instructions.
线程就是cpu执行时所需要的
Suppose you're reading a book, and you want to take a break right now,
but you want to be able to come back and resume reading from the exact point where you stopped.
 One way to achieve that is by jotting down the page number, line number, and word number.
 So your execution context for reading a book is these 3 numbers.
假设
If you have a roommate, and she's using the same technique,
she can take the book while you're not using it, and resume reading from where she stopped.
Then you can take it back, and resume it from where you were.

切换的太快了,你就感觉不到,就像同时在干多件事一样,每个花一点时间,分享书,分享cpu
Threads work in the same way. A CPU is giving you the 幻觉illusion that it's doing multiple多
computations运算 at the same time. It does that by spending花费 a bit点 of time on each
computation运算. It can do that because it has an execution context for each computation.
Just like you can share a book with your friend, many tasks can share a CPU.

On a more technical level, an execution context (therefore a thread) consists组合 of
the values of the CPU's registers 寄存器.

Last: threads are different from 进程processes. A thread is a context of execution,
 while a process is a bunch一簇，一堆 of resources资源 associated相关的 with a computation.
 A process can have one or many threads.

Clarification: the resources associated with a process include memory pages
 (all the threads in a process have the same view of the memory),

 file descriptors (e.g., open sockets), and security credentials
  (e.g., the ID of the user who started the process).



什么是进程(process)？
An executing instance of a program is called a process.

Each process provides the resources needed to execute a program.
A process has a virtual虚拟 address space, executable code,
 open handles to system objects, a security context,
 a unique唯一的 process进程标识符，pid identifier, environment variables,
 a priority 优先级类class, minimum and maximum working set sizes,
  and at least至少 one thread线程 of execution.
  Each process is started with a single thread,
   often called the primary主 thread, but can create additional额外的
    threads from any of its threads.


进程与线程的区别？谁快? 没有可比性,一个是资源的集合,一个是指令的执行
启动谁快?启动线程快,运行时是一样,都是线程在干活


Threads share the address space of the process that created it; processes have their own address space.
线程共享内存空间，进程的内存是独立的
Threads have direct access to the data segment of its process;
processes have their own copy of the data segment of the parent process.

Threads can directly communicate with other threads of its process;
processes must use interprocess communication to communicate with
sibling processes.
同一个进程的线程之间可以直接交流，两个进程想通信，必须通过一个中间代理来实现

New threads are easily created; new processes require duplication of the parent process.
创建新线程很简单， 创建新进程需要对其父进程进行一次克隆

Threads can exercise considerable control over threads of the same process; processes can only exercise control over child processes.
一个线程可以控制和操作同一进程里的其他线程，但是进程只能操作子进程

Changes to the main thread (cancellation, priority change, etc.) may affect the behavior of the other threads of the process; changes to the parent process does not affect child processes.

守护进程: 我是皇帝,大臣守护者我,
locks = {
    door1:key1,
    door2:key2,
}
python :同一时间就是一个线程,假象是同步的,不断的进行上下文的切换,python的线程
是调用操作系统的原生线程,
GIL: 全局解释器锁
nuber = 1 创建4个线程来修改这个数据,分别给4个cpu来处理,那么就修改乱了,
真正进行处理的是串行,python的解释器直接调用线程接口,解释器只能等结果,
四个线程独立执行,返回结果不确定,同一时间只有一个线程能工作,他去修改,其余的
等着,避免数据出错,去除全局解释器锁,

主要是他调用了系统原生线程函数,从寄存器里面拿东西,
join 就是串行了,再加一层锁,用户层的锁,

file1
a
b
c
d
e
f

车看见红灯停,绿灯走,

redLight = False 全局变量,

while True：
    if counter >30:
       redLight = True
    if counter >50 :
       redLight = False
       counter = 0


event.wait()

# a server thread can set or reset it
event.set()   True
event.clear() False

If the flag is set, the wait method doesn’t do anything.
标志位设定了，代表绿灯，直接通行,不会阻塞,wait方法就过

If the flag is cleared, wait will block until it becomes set again.
标志位被清空，代表红灯，wait等待变绿灯
Any number of threads may wait for the same event.
为什么要队列:
    提升双方的效率,把移动硬盘放在一个对列里,然后就可以出去了,找人帮着干
    并发提升效率,你依然把数据放到队列里面,完成了程序的解耦,减少依赖关系
    你就只和这个桌子有关系,把紧密的联系变成松的联系,

就是个容器,就是放东西的,列表(拿走就是复制一份,),元组,队列(数据
只有一份,取走了就没有了) 字典,都是容器,